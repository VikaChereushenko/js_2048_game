{"mappings":"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","sources":["<anon>","src/scripts/main.js","src/modules/Game.class.js","node_modules/@swc/helpers/esm/_class_call_check.js","node_modules/@swc/helpers/esm/_create_class.js","node_modules/@swc/helpers/esm/_sliced_to_array.js","node_modules/@swc/helpers/esm/_array_with_holes.js","node_modules/@swc/helpers/esm/_iterable_to_array_limit.js","node_modules/@swc/helpers/esm/_non_iterable_rest.js","node_modules/@swc/helpers/esm/_unsupported_iterable_to_array.js","node_modules/@swc/helpers/esm/_array_like_to_array.js","node_modules/@swc/helpers/esm/_to_consumable_array.js","node_modules/@swc/helpers/esm/_array_without_holes.js","node_modules/@swc/helpers/esm/_iterable_to_array.js","node_modules/@swc/helpers/esm/_non_iterable_spread.js","node_modules/@swc/helpers/esm/_type_of.js"],"sourcesContent":["(function () {\n\"use strict\";\nvar $3d28d7f1aac198f5$exports = {};\nfunction $8713978b2328d32b$export$2996f80ef42b8419(instance, Constructor) {\n    if (!(instance instanceof Constructor)) throw new TypeError(\"Cannot call a class as a function\");\n}\n\n\nfunction $4fc75ccb937ab1df$var$_defineProperties(target, props) {\n    for(var i = 0; i < props.length; i++){\n        var descriptor = props[i];\n        descriptor.enumerable = descriptor.enumerable || false;\n        descriptor.configurable = true;\n        if (\"value\" in descriptor) descriptor.writable = true;\n        Object.defineProperty(target, descriptor.key, descriptor);\n    }\n}\nfunction $4fc75ccb937ab1df$export$d60067ff2358eee8(Constructor, protoProps, staticProps) {\n    if (protoProps) $4fc75ccb937ab1df$var$_defineProperties(Constructor.prototype, protoProps);\n    if (staticProps) $4fc75ccb937ab1df$var$_defineProperties(Constructor, staticProps);\n    return Constructor;\n}\n\n\nfunction $09cbfe85151ea6c6$export$e6256bf45c68d561(arr) {\n    if (Array.isArray(arr)) return arr;\n}\n\n\nfunction $8ca2848f896a6803$export$2fd15edff6687200(arr, i) {\n    var _i = arr == null ? null : typeof Symbol !== \"undefined\" && arr[Symbol.iterator] || arr[\"@@iterator\"];\n    if (_i == null) return;\n    var _arr = [];\n    var _n = true;\n    var _d = false;\n    var _s, _e;\n    try {\n        for(_i = _i.call(arr); !(_n = (_s = _i.next()).done); _n = true){\n            _arr.push(_s.value);\n            if (i && _arr.length === i) break;\n        }\n    } catch (err) {\n        _d = true;\n        _e = err;\n    } finally{\n        try {\n            if (!_n && _i[\"return\"] != null) _i[\"return\"]();\n        } finally{\n            if (_d) throw _e;\n        }\n    }\n    return _arr;\n}\n\n\nfunction $a0bc1859061deae1$export$60dbc22abd7da546() {\n    throw new TypeError(\"Invalid attempt to destructure non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n}\n\n\nfunction $c3b10a83b523f372$export$79e617b1955a2616(arr, len) {\n    if (len == null || len > arr.length) len = arr.length;\n    for(var i = 0, arr2 = new Array(len); i < len; i++)arr2[i] = arr[i];\n    return arr2;\n}\n\n\nfunction $d4f69c5c6c4654b1$export$a5be06335b3a083c(o, minLen) {\n    if (!o) return;\n    if (typeof o === \"string\") return (0, $c3b10a83b523f372$export$79e617b1955a2616)(o, minLen);\n    var n = Object.prototype.toString.call(o).slice(8, -1);\n    if (n === \"Object\" && o.constructor) n = o.constructor.name;\n    if (n === \"Map\" || n === \"Set\") return Array.from(n);\n    if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return (0, $c3b10a83b523f372$export$79e617b1955a2616)(o, minLen);\n}\n\n\nfunction $efec029548ccee7f$export$fdf2a89c76341bbf(arr, i) {\n    return (0, $09cbfe85151ea6c6$export$e6256bf45c68d561)(arr) || (0, $8ca2848f896a6803$export$2fd15edff6687200)(arr, i) || (0, $d4f69c5c6c4654b1$export$a5be06335b3a083c)(arr, i) || (0, $a0bc1859061deae1$export$60dbc22abd7da546)();\n}\n\n\n\nfunction $c50969dc1df61e8b$export$7e0947b5ad3404e2(arr) {\n    if (Array.isArray(arr)) return (0, $c3b10a83b523f372$export$79e617b1955a2616)(arr);\n}\n\n\nfunction $09c9f293d010c0e1$export$1eb58a6e75231000(iter) {\n    if (typeof Symbol !== \"undefined\" && iter[Symbol.iterator] != null || iter[\"@@iterator\"] != null) return Array.from(iter);\n}\n\n\nfunction $38c2d4931cb7a7c4$export$e6f3c4780d19eb2b() {\n    throw new TypeError(\"Invalid attempt to spread non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n}\n\n\n\nfunction $227c6742e0ff6f82$export$1b5e630bc3aea29f(arr) {\n    return (0, $c50969dc1df61e8b$export$7e0947b5ad3404e2)(arr) || (0, $09c9f293d010c0e1$export$1eb58a6e75231000)(arr) || (0, $d4f69c5c6c4654b1$export$a5be06335b3a083c)(arr) || (0, $38c2d4931cb7a7c4$export$e6f3c4780d19eb2b)();\n}\n\n\nfunction $0b5c99e6a0876eaa$export$5f0017c582d45a2d(obj) {\n    \"@swc/helpers - typeof\";\n    return obj && typeof Symbol !== \"undefined\" && obj.constructor === Symbol ? \"symbol\" : typeof obj;\n}\n\n\n\"use strict\";\n/**\n * This class represents the game.\n * Now it has a basic structure, that is needed for testing.\n * Feel free to add more props and methods if needed.\n */ var $3d28d7f1aac198f5$var$Game = /*#__PURE__*/ function() {\n    function Game(initialState) {\n        (0, $8713978b2328d32b$export$2996f80ef42b8419)(this, Game);\n        // eslint-disable-next-line no-console\n        this.initialState = initialState;\n        this.messageStart = document.querySelector(\".message-start\");\n        this.messageLose = document.querySelector(\".message-lose\");\n        this.messageWin = document.querySelector(\".message-win\");\n        this.startActive = false;\n        this.score = 0;\n    }\n    (0, $4fc75ccb937ab1df$export$d60067ff2358eee8)(Game, [\n        {\n            key: \"moveLeft\",\n            value: function moveLeft() {\n                var _this = this;\n                var tbody = document.querySelector(\"tbody\");\n                var trows = (0, $227c6742e0ff6f82$export$1b5e630bc3aea29f)(tbody.children);\n                var showStatus = this.getStatus();\n                if (showStatus === \"playing\") trows.forEach(function(row) {\n                    var objArr = [];\n                    var checkMerge = function(startCell, endCell, content) {\n                        var _loop = function(j) {\n                            var prevent = objArr.some(function(obj) {\n                                return obj.cellIndex === j && obj.cellContent !== content;\n                            });\n                            if (prevent) return {\n                                v: false\n                            };\n                        };\n                        for(var j = startCell + 1; j < endCell; j++){\n                            var _ret = _loop(j);\n                            if ((0, $0b5c99e6a0876eaa$export$5f0017c582d45a2d)(_ret) === \"object\") return _ret.v;\n                        }\n                        return true;\n                    };\n                    (0, $227c6742e0ff6f82$export$1b5e630bc3aea29f)(row.children).forEach(function(cell, i) {\n                        var saveData = {};\n                        var value = parseInt(cell.textContent);\n                        if (value) {\n                            var exist = objArr.find(function(obj) {\n                                return obj.cellContent === value && checkMerge(obj.cellIndex, i, value) === true && obj.mergeTry < 1;\n                            });\n                            if (exist) {\n                                exist.cellContent += value;\n                                exist.mergeTry++;\n                                _this.score += exist.cellContent;\n                            } else {\n                                saveData.cellIndex = i;\n                                saveData.cellContent = value;\n                                saveData.mergeTry = 0;\n                                objArr.push(saveData);\n                            }\n                            var newTag = document.createElement(\"td\");\n                            newTag.classList.add(\"field-cell\");\n                            cell.replaceWith(newTag);\n                        }\n                    });\n                    if (objArr.length !== 0) objArr.forEach(function(obj) {\n                        var _iteratorNormalCompletion = true, _didIteratorError = false, _iteratorError = undefined;\n                        try {\n                            for(var _iterator = (0, $227c6742e0ff6f82$export$1b5e630bc3aea29f)(row.children)[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true){\n                                var cell = _step.value;\n                                if (!cell.textContent) {\n                                    cell.textContent = obj.cellContent;\n                                    cell.classList.add(\"field-cell--\".concat(obj.cellContent));\n                                    if (obj.cellContent === 2048) {\n                                        _this.messageWin.classList.remove(\"hidden\");\n                                        _this.startActive = false;\n                                    }\n                                    break;\n                                }\n                            }\n                        } catch (err) {\n                            _didIteratorError = true;\n                            _iteratorError = err;\n                        } finally{\n                            try {\n                                if (!_iteratorNormalCompletion && _iterator.return != null) {\n                                    _iterator.return();\n                                }\n                            } finally{\n                                if (_didIteratorError) {\n                                    throw _iteratorError;\n                                }\n                            }\n                        }\n                    });\n                });\n            }\n        },\n        {\n            key: \"moveRight\",\n            value: function moveRight() {\n                var _this = this;\n                var tbody = document.querySelector(\"tbody\");\n                var trows = (0, $227c6742e0ff6f82$export$1b5e630bc3aea29f)(tbody.children);\n                var showStatus = this.getStatus();\n                if (showStatus === \"playing\") trows.forEach(function(row) {\n                    var objArr = [];\n                    var checkMerge = function(startCell, endCell, content) {\n                        var _loop = function(j) {\n                            var prevent = objArr.some(function(obj) {\n                                return obj.cellIndex === j && obj.cellContent !== content;\n                            });\n                            if (prevent) return {\n                                v: false\n                            };\n                        };\n                        for(var j = startCell + 1; j < endCell; j++){\n                            var _ret = _loop(j);\n                            if ((0, $0b5c99e6a0876eaa$export$5f0017c582d45a2d)(_ret) === \"object\") return _ret.v;\n                        }\n                        return true;\n                    };\n                    (0, $227c6742e0ff6f82$export$1b5e630bc3aea29f)(row.children).reverse().forEach(function(cell, i) {\n                        var saveData = {};\n                        var value = parseInt(cell.textContent);\n                        if (value) {\n                            var exist = objArr.find(function(obj) {\n                                return obj.cellContent === value && checkMerge(obj.cellIndex, i, value) === true && obj.mergeTry < 1;\n                            });\n                            if (exist) {\n                                exist.cellContent += value;\n                                exist.mergeTry++;\n                                _this.score += exist.cellContent;\n                            } else {\n                                saveData.cellIndex = i;\n                                saveData.cellContent = value;\n                                saveData.mergeTry = 0;\n                                objArr.push(saveData);\n                            }\n                            var newTag = document.createElement(\"td\");\n                            newTag.classList.add(\"field-cell\");\n                            cell.replaceWith(newTag);\n                        }\n                    });\n                    if (objArr.length !== 0) objArr.forEach(function(obj) {\n                        var _iteratorNormalCompletion = true, _didIteratorError = false, _iteratorError = undefined;\n                        try {\n                            for(var _iterator = (0, $227c6742e0ff6f82$export$1b5e630bc3aea29f)(row.children).reverse()[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true){\n                                var cell = _step.value;\n                                if (!cell.textContent) {\n                                    cell.textContent = obj.cellContent;\n                                    cell.classList.add(\"field-cell--\".concat(obj.cellContent));\n                                    if (obj.cellContent === 2048) {\n                                        _this.messageWin.classList.remove(\"hidden\");\n                                        _this.startActive = false;\n                                    }\n                                    break;\n                                }\n                            }\n                        } catch (err) {\n                            _didIteratorError = true;\n                            _iteratorError = err;\n                        } finally{\n                            try {\n                                if (!_iteratorNormalCompletion && _iterator.return != null) {\n                                    _iterator.return();\n                                }\n                            } finally{\n                                if (_didIteratorError) {\n                                    throw _iteratorError;\n                                }\n                            }\n                        }\n                    });\n                });\n            }\n        },\n        {\n            key: \"moveUp\",\n            value: function moveUp() {\n                var _this = this;\n                var tbody = document.querySelector(\"tbody\");\n                var trows = (0, $227c6742e0ff6f82$export$1b5e630bc3aea29f)(tbody.children);\n                var objArr = [];\n                var checkMerge = function(colIndex, startRow, endRow, content) {\n                    var _loop = function(j) {\n                        var prevent = objArr.some(function(obj) {\n                            return obj.rowIndex === j && obj.cellIndex === colIndex && obj.cellContent !== content;\n                        });\n                        if (prevent) return {\n                            v: false\n                        };\n                    };\n                    for(var j = startRow + 1; j < endRow; j++){\n                        var _ret = _loop(j);\n                        if ((0, $0b5c99e6a0876eaa$export$5f0017c582d45a2d)(_ret) === \"object\") return _ret.v;\n                    }\n                    return true;\n                };\n                var showStatus = this.getStatus();\n                if (showStatus === \"playing\") {\n                    trows.forEach(function(row, index) {\n                        (0, $227c6742e0ff6f82$export$1b5e630bc3aea29f)(row.children).forEach(function(cell, i) {\n                            var saveData = {};\n                            var value = parseInt(cell.textContent);\n                            if (value) {\n                                var exist = objArr.find(function(obj) {\n                                    return obj.cellIndex === i && obj.cellContent === value && checkMerge(i, obj.rowIndex, index, value) === true;\n                                });\n                                if (exist) {\n                                    exist.cellContent += value;\n                                    _this.score += exist.cellContent;\n                                } else {\n                                    saveData.rowIndex = index;\n                                    saveData.cellIndex = i;\n                                    saveData.cellContent = value;\n                                    objArr.push(saveData);\n                                }\n                                var newTag = document.createElement(\"td\");\n                                newTag.classList.add(\"field-cell\");\n                                cell.replaceWith(newTag);\n                            }\n                        });\n                    });\n                    objArr.forEach(function(obj) {\n                        var _iteratorNormalCompletion = true, _didIteratorError = false, _iteratorError = undefined;\n                        try {\n                            for(var _iterator = Object.entries(obj)[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true){\n                                var _step_value = (0, $efec029548ccee7f$export$fdf2a89c76341bbf)(_step.value, 2), key = _step_value[0], value = _step_value[1];\n                                var _iteratorNormalCompletion1 = true, _didIteratorError1 = false, _iteratorError1 = undefined;\n                                if (key === \"cellIndex\") try {\n                                    for(var _iterator1 = trows[Symbol.iterator](), _step1; !(_iteratorNormalCompletion1 = (_step1 = _iterator1.next()).done); _iteratorNormalCompletion1 = true){\n                                        var row = _step1.value;\n                                        var childIndex = parseInt(value) + 1;\n                                        var rowCell = row.querySelector(\"*:nth-child(\".concat(childIndex, \")\"));\n                                        if (!rowCell.textContent) {\n                                            rowCell.textContent = obj.cellContent;\n                                            rowCell.classList.add(\"field-cell--\".concat(obj.cellContent));\n                                            if (obj.cellContent === 2048) {\n                                                _this.messageWin.classList.remove(\"hidden\");\n                                                _this.startActive = false;\n                                            }\n                                            break;\n                                        }\n                                    }\n                                } catch (err) {\n                                    _didIteratorError1 = true;\n                                    _iteratorError1 = err;\n                                } finally{\n                                    try {\n                                        if (!_iteratorNormalCompletion1 && _iterator1.return != null) {\n                                            _iterator1.return();\n                                        }\n                                    } finally{\n                                        if (_didIteratorError1) {\n                                            throw _iteratorError1;\n                                        }\n                                    }\n                                }\n                            }\n                        } catch (err) {\n                            _didIteratorError = true;\n                            _iteratorError = err;\n                        } finally{\n                            try {\n                                if (!_iteratorNormalCompletion && _iterator.return != null) {\n                                    _iterator.return();\n                                }\n                            } finally{\n                                if (_didIteratorError) {\n                                    throw _iteratorError;\n                                }\n                            }\n                        }\n                    });\n                }\n            }\n        },\n        {\n            key: \"moveDown\",\n            value: function moveDown() {\n                var _this = this;\n                var tbody = document.querySelector(\"tbody\");\n                var trowsReversed = (0, $227c6742e0ff6f82$export$1b5e630bc3aea29f)(tbody.children).reverse();\n                var objArr = [];\n                var checkMerge = function(colIndex, startRow, endRow, content) {\n                    var _loop = function(j) {\n                        var prevent = objArr.some(function(obj) {\n                            return obj.rowIndex === j && obj.cellIndex === colIndex && obj.cellContent !== content;\n                        });\n                        if (prevent) return {\n                            v: false\n                        };\n                    };\n                    for(var j = startRow + 1; j < endRow; j++){\n                        var _ret = _loop(j);\n                        if ((0, $0b5c99e6a0876eaa$export$5f0017c582d45a2d)(_ret) === \"object\") return _ret.v;\n                    }\n                    return true;\n                };\n                var showStatus = this.getStatus();\n                if (showStatus === \"playing\") {\n                    trowsReversed.forEach(function(row, index) {\n                        (0, $227c6742e0ff6f82$export$1b5e630bc3aea29f)(row.children).forEach(function(cell, i) {\n                            var saveData = {};\n                            var value = parseInt(cell.textContent);\n                            if (value) {\n                                var exist = objArr.find(function(obj) {\n                                    return obj.cellIndex === i && obj.cellContent === value && checkMerge(i, obj.rowIndex, index, value) === true;\n                                });\n                                if (exist) {\n                                    exist.cellContent += value;\n                                    _this.score += exist.cellContent;\n                                } else {\n                                    saveData.rowIndex = index;\n                                    saveData.cellIndex = i;\n                                    saveData.cellContent = value;\n                                    objArr.push(saveData);\n                                }\n                                var newTag = document.createElement(\"td\");\n                                newTag.classList.add(\"field-cell\");\n                                cell.replaceWith(newTag);\n                            }\n                        });\n                    });\n                    objArr.forEach(function(obj) {\n                        var _iteratorNormalCompletion = true, _didIteratorError = false, _iteratorError = undefined;\n                        try {\n                            for(var _iterator = Object.entries(obj)[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true){\n                                var _step_value = (0, $efec029548ccee7f$export$fdf2a89c76341bbf)(_step.value, 2), key = _step_value[0], value = _step_value[1];\n                                var _iteratorNormalCompletion1 = true, _didIteratorError1 = false, _iteratorError1 = undefined;\n                                if (key === \"cellIndex\") try {\n                                    for(var _iterator1 = trowsReversed[Symbol.iterator](), _step1; !(_iteratorNormalCompletion1 = (_step1 = _iterator1.next()).done); _iteratorNormalCompletion1 = true){\n                                        var row = _step1.value;\n                                        var childIndex = parseInt(value) + 1;\n                                        var rowCell = row.querySelector(\"*:nth-child(\".concat(childIndex, \")\"));\n                                        if (!rowCell.textContent) {\n                                            rowCell.textContent = obj.cellContent;\n                                            rowCell.classList.add(\"field-cell--\".concat(obj.cellContent));\n                                            if (obj.cellContent === 2048) {\n                                                _this.messageWin.classList.remove(\"hidden\");\n                                                _this.startActive = false;\n                                            }\n                                            break;\n                                        }\n                                    }\n                                } catch (err) {\n                                    _didIteratorError1 = true;\n                                    _iteratorError1 = err;\n                                } finally{\n                                    try {\n                                        if (!_iteratorNormalCompletion1 && _iterator1.return != null) {\n                                            _iterator1.return();\n                                        }\n                                    } finally{\n                                        if (_didIteratorError1) {\n                                            throw _iteratorError1;\n                                        }\n                                    }\n                                }\n                            }\n                        } catch (err) {\n                            _didIteratorError = true;\n                            _iteratorError = err;\n                        } finally{\n                            try {\n                                if (!_iteratorNormalCompletion && _iterator.return != null) {\n                                    _iterator.return();\n                                }\n                            } finally{\n                                if (_didIteratorError) {\n                                    throw _iteratorError;\n                                }\n                            }\n                        }\n                    });\n                }\n            }\n        },\n        {\n            /**\n   * @returns {number}\n   */ key: \"getScore\",\n            value: function getScore() {\n                var score = document.querySelector(\".game-score\");\n                if (!this.startActive) this.score = 0;\n                score.textContent = this.score;\n                return this.score;\n            }\n        },\n        {\n            /**\n   * @returns {number[][]}\n   */ key: \"getState\",\n            value: function getState() {\n                var tbody = document.querySelector(\"tbody\");\n                var trows = (0, $227c6742e0ff6f82$export$1b5e630bc3aea29f)(tbody.children);\n                this.initialState = trows.map(function(row) {\n                    var rowChildren = (0, $227c6742e0ff6f82$export$1b5e630bc3aea29f)(row.children);\n                    var numbersArr = rowChildren.map(function(cell) {\n                        var cellContent = parseInt(cell.textContent);\n                        if (!cellContent) cellContent = 0;\n                        return cellContent;\n                    });\n                    return numbersArr;\n                });\n            }\n        },\n        {\n            /**\n   * Returns the current game status.\n   *\n   * @returns {string} One of: 'idle', 'playing', 'win', 'lose'\n   *\n   * `idle` - the game has not started yet (the initial state);\n   * `playing` - the game is in progress;\n   * `win` - the game is won;\n   * `lose` - the game is lost\n   */ key: \"getStatus\",\n            value: function getStatus() {\n                var gameStatus = \"\";\n                if (this.startActive === false) gameStatus = \"idle\";\n                if (this.startActive === true) gameStatus = \"playing\";\n                if (!this.messageWin.classList.contains(\"hidden\")) gameStatus = \"win\";\n                if (!this.messageLose.classList.contains(\"hidden\")) gameStatus = \"lose\";\n                return gameStatus;\n            }\n        },\n        {\n            /**\n   * Starts the game.\n   */ key: \"start\",\n            value: function start() {\n                this.messageStart.classList.add(\"hidden\");\n                this.switchButton();\n                this.startActive = true;\n                this.addTiles(2);\n            }\n        },\n        {\n            /**\n   * Resets the game.\n   */ key: \"restart\",\n            value: function restart() {\n                var tbody = document.querySelector(\"tbody\");\n                var trows = (0, $227c6742e0ff6f82$export$1b5e630bc3aea29f)(tbody.children);\n                this.messageStart.classList.remove(\"hidden\");\n                this.messageLose.classList.add(\"hidden\");\n                trows.forEach(function(row) {\n                    (0, $227c6742e0ff6f82$export$1b5e630bc3aea29f)(row.children).forEach(function(td) {\n                        var newTag = document.createElement(\"td\");\n                        newTag.classList.add(\"field-cell\");\n                        td.replaceWith(newTag);\n                    });\n                });\n                this.startActive = false;\n                this.switchButton();\n                this.getScore();\n            }\n        },\n        {\n            // Add your own methods here\n            key: \"switchButton\",\n            value: function switchButton() {\n                var btn = document.querySelector(\".button\");\n                var hasRestart = btn.classList.contains(\"restart\");\n                if (hasRestart) {\n                    btn.classList.replace(\"restart\", \"start\");\n                    btn.textContent = \"Start\";\n                } else {\n                    btn.classList.replace(\"start\", \"restart\");\n                    btn.textContent = \"Restart\";\n                }\n            }\n        },\n        {\n            key: \"generateTiles\",\n            value: function generateTiles() {\n                var set = {\n                    2: 0.9,\n                    4: 0.1\n                };\n                var sum = 0;\n                for(var num in set)sum += set[num];\n                function pickRandom() {\n                    var pick = Math.random() * sum;\n                    for(var j in set){\n                        pick -= set[j];\n                        if (pick <= 0) return j;\n                    }\n                }\n                return pickRandom();\n            }\n        },\n        {\n            key: \"addTiles\",\n            value: function addTiles(num) {\n                var tbody = document.querySelector(\"tbody\");\n                var trows = (0, $227c6742e0ff6f82$export$1b5e630bc3aea29f)(tbody.children);\n                var numberOfTiles = num;\n                var emptyCells = [];\n                trows.forEach(function(row) {\n                    var cells = (0, $227c6742e0ff6f82$export$1b5e630bc3aea29f)(row.children);\n                    cells.forEach(function(cell) {\n                        if (!cell.textContent) emptyCells.push(cell);\n                    });\n                });\n                for(var i = 0; i < numberOfTiles; i++){\n                    var randomIndex = Math.floor(Math.random() * emptyCells.length);\n                    var selectedCell = emptyCells[randomIndex];\n                    var randomValue = this.generateTiles();\n                    selectedCell.textContent = randomValue;\n                    selectedCell.classList.add(\"field-cell--\".concat(randomValue));\n                    emptyCells.splice(randomIndex, 1);\n                }\n            }\n        },\n        {\n            key: \"hasEmptyCell\",\n            value: function hasEmptyCell() {\n                var _iteratorNormalCompletion = true, _didIteratorError = false, _iteratorError = undefined;\n                try {\n                    for(var _iterator = this.initialState[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true){\n                        var row = _step.value;\n                        if (row.some(function(cell) {\n                            return cell === 0;\n                        })) return true;\n                    }\n                } catch (err) {\n                    _didIteratorError = true;\n                    _iteratorError = err;\n                } finally{\n                    try {\n                        if (!_iteratorNormalCompletion && _iterator.return != null) {\n                            _iterator.return();\n                        }\n                    } finally{\n                        if (_didIteratorError) {\n                            throw _iteratorError;\n                        }\n                    }\n                }\n                return false;\n            }\n        }\n    ]);\n    return Game;\n}();\n$3d28d7f1aac198f5$exports = $3d28d7f1aac198f5$var$Game;\n\n\nvar $197cd56b15c33885$var$game = new $3d28d7f1aac198f5$exports();\n// Write your code here\nvar $197cd56b15c33885$var$body = document.querySelector(\"body\");\nvar $197cd56b15c33885$var$button = document.querySelector(\".button\");\n$197cd56b15c33885$var$button.addEventListener(\"click\", function() {\n    if ($197cd56b15c33885$var$button.classList.contains(\"start\")) $197cd56b15c33885$var$game.start();\n    else if ($197cd56b15c33885$var$button.classList.contains(\"restart\")) $197cd56b15c33885$var$game.restart();\n});\n$197cd56b15c33885$var$body.addEventListener(\"keydown\", function(e) {\n    $197cd56b15c33885$var$game.getState();\n    var copyOfState = JSON.stringify($197cd56b15c33885$var$game.initialState);\n    switch(e.key){\n        case \"ArrowUp\":\n            $197cd56b15c33885$var$game.moveUp();\n            break;\n        case \"ArrowDown\":\n            $197cd56b15c33885$var$game.moveDown();\n            break;\n        case \"ArrowLeft\":\n            $197cd56b15c33885$var$game.moveLeft();\n            break;\n        case \"ArrowRight\":\n            $197cd56b15c33885$var$game.moveRight();\n            break;\n    }\n    $197cd56b15c33885$var$game.getState();\n    var actualState = JSON.stringify($197cd56b15c33885$var$game.initialState);\n    if (copyOfState !== actualState) $197cd56b15c33885$var$game.addTiles(1);\n    if (!$197cd56b15c33885$var$game.hasEmptyCell()) $197cd56b15c33885$var$game.messageLose.classList.remove(\"hidden\");\n    $197cd56b15c33885$var$game.getScore();\n});\n\n})();\n//# sourceMappingURL=index.846555ea.js.map\n","'use strict';\n\n// Uncomment the next lines to use your game instance in the browser\nconst Game = require('../modules/Game.class');\nconst game = new Game();\n\n// Write your code here\n\nconst body = document.querySelector('body');\nconst button = document.querySelector('.button');\n\nbutton.addEventListener('click', () => {\n  if (button.classList.contains('start')) {\n    game.start();\n  } else if (button.classList.contains('restart')) {\n    game.restart();\n  }\n});\n\nbody.addEventListener('keydown', (e) => {\n  game.getState();\n\n  const copyOfState = JSON.stringify(game.initialState);\n\n  switch (e.key) {\n    case 'ArrowUp':\n      game.moveUp();\n      break;\n    case 'ArrowDown':\n      game.moveDown();\n      break;\n    case 'ArrowLeft':\n      game.moveLeft();\n      break;\n    case 'ArrowRight':\n      game.moveRight();\n      break;\n  }\n\n  game.getState();\n\n  const actualState = JSON.stringify(game.initialState);\n\n  if (copyOfState !== actualState) {\n    game.addTiles(1);\n  }\n\n  if (!game.hasEmptyCell()) {\n    game.messageLose.classList.remove('hidden');\n  }\n\n  game.getScore();\n});\n","'use strict';\n\n/**\n * This class represents the game.\n * Now it has a basic structure, that is needed for testing.\n * Feel free to add more props and methods if needed.\n */\nclass Game {\n  /**\n   * Creates a new game instance.\n   *\n   * @param {number[][]} initialState\n   * The initial state of the board.\n   * @default\n   * [[0, 0, 0, 0],\n   *  [0, 0, 0, 0],\n   *  [0, 0, 0, 0],\n   *  [0, 0, 0, 0]]\n   *\n   * If passed, the board will be initialized with the provided\n   * initial state.\n   */\n  constructor(initialState) {\n    // eslint-disable-next-line no-console\n    this.initialState = initialState;\n    this.messageStart = document.querySelector('.message-start');\n    this.messageLose = document.querySelector('.message-lose');\n    this.messageWin = document.querySelector('.message-win');\n    this.startActive = false;\n    this.score = 0;\n  }\n\n  moveLeft() {\n    const tbody = document.querySelector('tbody');\n    const trows = [...tbody.children];\n    const showStatus = this.getStatus();\n\n    if (showStatus === 'playing') {\n      trows.forEach((row) => {\n        const objArr = [];\n        const checkMerge = (startCell, endCell, content) => {\n          for (let j = startCell + 1; j < endCell; j++) {\n            const prevent = objArr.some(\n              (obj) => obj.cellIndex === j && obj.cellContent !== content,\n            );\n\n            if (prevent) {\n              return false;\n            }\n          }\n\n          return true;\n        };\n\n        [...row.children].forEach((cell, i) => {\n          const saveData = {};\n          const value = parseInt(cell.textContent);\n\n          if (value) {\n            const exist = objArr.find(\n              (obj) =>\n                obj.cellContent === value &&\n                checkMerge(obj.cellIndex, i, value) === true &&\n                obj.mergeTry < 1,\n            );\n\n            if (exist) {\n              exist.cellContent += value;\n              exist.mergeTry++;\n              this.score += exist.cellContent;\n            } else {\n              saveData.cellIndex = i;\n              saveData.cellContent = value;\n              saveData.mergeTry = 0;\n\n              objArr.push(saveData);\n            }\n\n            const newTag = document.createElement('td');\n\n            newTag.classList.add('field-cell');\n            cell.replaceWith(newTag);\n          }\n        });\n\n        if (objArr.length !== 0) {\n          objArr.forEach((obj) => {\n            for (const cell of [...row.children]) {\n              if (!cell.textContent) {\n                cell.textContent = obj.cellContent;\n                cell.classList.add(`field-cell--${obj.cellContent}`);\n\n                if (obj.cellContent === 2048) {\n                  this.messageWin.classList.remove('hidden');\n\n                  this.startActive = false;\n                }\n\n                break;\n              }\n            }\n          });\n        }\n      });\n    }\n  }\n\n  moveRight() {\n    const tbody = document.querySelector('tbody');\n    const trows = [...tbody.children];\n    const showStatus = this.getStatus();\n\n    if (showStatus === 'playing') {\n      trows.forEach((row) => {\n        const objArr = [];\n        const checkMerge = (startCell, endCell, content) => {\n          for (let j = startCell + 1; j < endCell; j++) {\n            const prevent = objArr.some(\n              (obj) => obj.cellIndex === j && obj.cellContent !== content,\n            );\n\n            if (prevent) {\n              return false;\n            }\n          }\n\n          return true;\n        };\n\n        [...row.children].reverse().forEach((cell, i) => {\n          const saveData = {};\n          const value = parseInt(cell.textContent);\n\n          if (value) {\n            const exist = objArr.find(\n              (obj) =>\n                obj.cellContent === value &&\n                checkMerge(obj.cellIndex, i, value) === true &&\n                obj.mergeTry < 1,\n            );\n\n            if (exist) {\n              exist.cellContent += value;\n              exist.mergeTry++;\n              this.score += exist.cellContent;\n            } else {\n              saveData.cellIndex = i;\n              saveData.cellContent = value;\n              saveData.mergeTry = 0;\n\n              objArr.push(saveData);\n            }\n\n            const newTag = document.createElement('td');\n\n            newTag.classList.add('field-cell');\n            cell.replaceWith(newTag);\n          }\n        });\n\n        if (objArr.length !== 0) {\n          objArr.forEach((obj) => {\n            for (const cell of [...row.children].reverse()) {\n              if (!cell.textContent) {\n                cell.textContent = obj.cellContent;\n                cell.classList.add(`field-cell--${obj.cellContent}`);\n\n                if (obj.cellContent === 2048) {\n                  this.messageWin.classList.remove('hidden');\n\n                  this.startActive = false;\n                }\n                break;\n              }\n            }\n          });\n        }\n      });\n    }\n  }\n\n  moveUp() {\n    const tbody = document.querySelector('tbody');\n    const trows = [...tbody.children];\n    const objArr = [];\n    const checkMerge = (colIndex, startRow, endRow, content) => {\n      for (let j = startRow + 1; j < endRow; j++) {\n        const prevent = objArr.some(\n          (obj) =>\n            obj.rowIndex === j &&\n            obj.cellIndex === colIndex &&\n            obj.cellContent !== content,\n        );\n\n        if (prevent) {\n          return false;\n        }\n      }\n\n      return true;\n    };\n    const showStatus = this.getStatus();\n\n    if (showStatus === 'playing') {\n      trows.forEach((row, index) => {\n        [...row.children].forEach((cell, i) => {\n          const saveData = {};\n          const value = parseInt(cell.textContent);\n\n          if (value) {\n            const exist = objArr.find(\n              (obj) =>\n                obj.cellIndex === i &&\n                obj.cellContent === value &&\n                checkMerge(i, obj.rowIndex, index, value) === true,\n            );\n\n            if (exist) {\n              exist.cellContent += value;\n              this.score += exist.cellContent;\n            } else {\n              saveData.rowIndex = index;\n              saveData.cellIndex = i;\n              saveData.cellContent = value;\n\n              objArr.push(saveData);\n            }\n\n            const newTag = document.createElement('td');\n\n            newTag.classList.add('field-cell');\n            cell.replaceWith(newTag);\n          }\n        });\n      });\n\n      objArr.forEach((obj) => {\n        for (const [key, value] of Object.entries(obj)) {\n          if (key === 'cellIndex') {\n            for (const row of trows) {\n              const childIndex = parseInt(value) + 1;\n              const rowCell = row.querySelector(`*:nth-child(${childIndex})`);\n\n              if (!rowCell.textContent) {\n                rowCell.textContent = obj.cellContent;\n                rowCell.classList.add(`field-cell--${obj.cellContent}`);\n\n                if (obj.cellContent === 2048) {\n                  this.messageWin.classList.remove('hidden');\n\n                  this.startActive = false;\n                }\n                break;\n              }\n            }\n          }\n        }\n      });\n    }\n  }\n\n  moveDown() {\n    const tbody = document.querySelector('tbody');\n    const trowsReversed = [...tbody.children].reverse();\n    const objArr = [];\n    const checkMerge = (colIndex, startRow, endRow, content) => {\n      for (let j = startRow + 1; j < endRow; j++) {\n        const prevent = objArr.some(\n          (obj) =>\n            obj.rowIndex === j &&\n            obj.cellIndex === colIndex &&\n            obj.cellContent !== content,\n        );\n\n        if (prevent) {\n          return false;\n        }\n      }\n\n      return true;\n    };\n    const showStatus = this.getStatus();\n\n    if (showStatus === 'playing') {\n      trowsReversed.forEach((row, index) => {\n        [...row.children].forEach((cell, i) => {\n          const saveData = {};\n          const value = parseInt(cell.textContent);\n\n          if (value) {\n            const exist = objArr.find(\n              (obj) =>\n                obj.cellIndex === i &&\n                obj.cellContent === value &&\n                checkMerge(i, obj.rowIndex, index, value) === true,\n            );\n\n            if (exist) {\n              exist.cellContent += value;\n              this.score += exist.cellContent;\n            } else {\n              saveData.rowIndex = index;\n              saveData.cellIndex = i;\n              saveData.cellContent = value;\n\n              objArr.push(saveData);\n            }\n\n            const newTag = document.createElement('td');\n\n            newTag.classList.add('field-cell');\n            cell.replaceWith(newTag);\n          }\n        });\n      });\n\n      objArr.forEach((obj) => {\n        for (const [key, value] of Object.entries(obj)) {\n          if (key === 'cellIndex') {\n            for (const row of trowsReversed) {\n              const childIndex = parseInt(value) + 1;\n              const rowCell = row.querySelector(`*:nth-child(${childIndex})`);\n\n              if (!rowCell.textContent) {\n                rowCell.textContent = obj.cellContent;\n                rowCell.classList.add(`field-cell--${obj.cellContent}`);\n\n                if (obj.cellContent === 2048) {\n                  this.messageWin.classList.remove('hidden');\n\n                  this.startActive = false;\n                }\n                break;\n              }\n            }\n          }\n        }\n      });\n    }\n  }\n  /**\n   * @returns {number}\n   */\n  getScore() {\n    const score = document.querySelector('.game-score');\n\n    if (!this.startActive) {\n      this.score = 0;\n    }\n\n    score.textContent = this.score;\n\n    return this.score;\n  }\n\n  /**\n   * @returns {number[][]}\n   */\n  getState() {\n    const tbody = document.querySelector('tbody');\n    const trows = [...tbody.children];\n\n    this.initialState = trows.map((row) => {\n      const rowChildren = [...row.children];\n      const numbersArr = rowChildren.map((cell) => {\n        let cellContent = parseInt(cell.textContent);\n\n        if (!cellContent) {\n          cellContent = 0;\n        }\n\n        return cellContent;\n      });\n\n      return numbersArr;\n    });\n  }\n\n  /**\n   * Returns the current game status.\n   *\n   * @returns {string} One of: 'idle', 'playing', 'win', 'lose'\n   *\n   * `idle` - the game has not started yet (the initial state);\n   * `playing` - the game is in progress;\n   * `win` - the game is won;\n   * `lose` - the game is lost\n   */\n  getStatus() {\n    let gameStatus = '';\n\n    if (this.startActive === false) {\n      gameStatus = 'idle';\n    }\n\n    if (this.startActive === true) {\n      gameStatus = 'playing';\n    }\n\n    if (!this.messageWin.classList.contains('hidden')) {\n      gameStatus = 'win';\n    }\n\n    if (!this.messageLose.classList.contains('hidden')) {\n      gameStatus = 'lose';\n    }\n\n    return gameStatus;\n  }\n\n  /**\n   * Starts the game.\n   */\n  start() {\n    this.messageStart.classList.add('hidden');\n\n    this.switchButton();\n\n    this.startActive = true;\n\n    this.addTiles(2);\n  }\n  /**\n   * Resets the game.\n   */\n  restart() {\n    const tbody = document.querySelector('tbody');\n    const trows = [...tbody.children];\n\n    this.messageStart.classList.remove('hidden');\n    this.messageLose.classList.add('hidden');\n\n    trows.forEach((row) => {\n      [...row.children].forEach((td) => {\n        const newTag = document.createElement('td');\n\n        newTag.classList.add('field-cell');\n        td.replaceWith(newTag);\n      });\n    });\n\n    this.startActive = false;\n    this.switchButton();\n    this.getScore();\n  }\n\n  // Add your own methods here\n\n  switchButton() {\n    const btn = document.querySelector('.button');\n    const hasRestart = btn.classList.contains('restart');\n\n    if (hasRestart) {\n      btn.classList.replace('restart', 'start');\n      btn.textContent = 'Start';\n    } else {\n      btn.classList.replace('start', 'restart');\n      btn.textContent = 'Restart';\n    }\n  }\n\n  generateTiles() {\n    const set = {\n      2: 0.9,\n      4: 0.1,\n    };\n\n    let sum = 0;\n\n    for (const num in set) {\n      sum += set[num];\n    }\n\n    function pickRandom() {\n      let pick = Math.random() * sum;\n\n      for (const j in set) {\n        pick -= set[j];\n\n        if (pick <= 0) {\n          return j;\n        }\n      }\n    }\n\n    return pickRandom();\n  }\n\n  addTiles(num) {\n    const tbody = document.querySelector('tbody');\n    const trows = [...tbody.children];\n    const numberOfTiles = num;\n    const emptyCells = [];\n\n    trows.forEach((row) => {\n      const cells = [...row.children];\n\n      cells.forEach((cell) => {\n        if (!cell.textContent) {\n          emptyCells.push(cell);\n        }\n      });\n    });\n\n    for (let i = 0; i < numberOfTiles; i++) {\n      const randomIndex = Math.floor(Math.random() * emptyCells.length);\n      const selectedCell = emptyCells[randomIndex];\n\n      const randomValue = this.generateTiles();\n\n      selectedCell.textContent = randomValue;\n      selectedCell.classList.add(`field-cell--${randomValue}`);\n\n      emptyCells.splice(randomIndex, 1);\n    }\n  }\n\n  hasEmptyCell() {\n    for (const row of this.initialState) {\n      if (row.some((cell) => cell === 0)) {\n        return true;\n      }\n    }\n\n    return false;\n  }\n}\nmodule.exports = Game;\n","export function _class_call_check(instance, Constructor) {\n    if (!(instance instanceof Constructor)) throw new TypeError(\"Cannot call a class as a function\");\n}\nexport { _class_call_check as _ };\n","function _defineProperties(target, props) {\n    for (var i = 0; i < props.length; i++) {\n        var descriptor = props[i];\n        descriptor.enumerable = descriptor.enumerable || false;\n        descriptor.configurable = true;\n\n        if (\"value\" in descriptor) descriptor.writable = true;\n\n        Object.defineProperty(target, descriptor.key, descriptor);\n    }\n}\nexport function _create_class(Constructor, protoProps, staticProps) {\n    if (protoProps) _defineProperties(Constructor.prototype, protoProps);\n    if (staticProps) _defineProperties(Constructor, staticProps);\n\n    return Constructor;\n}\nexport { _create_class as _ };\n","import { _array_with_holes } from \"./_array_with_holes.js\";\nimport { _iterable_to_array_limit } from \"./_iterable_to_array_limit.js\";\nimport { _non_iterable_rest } from \"./_non_iterable_rest.js\";\nimport { _unsupported_iterable_to_array } from \"./_unsupported_iterable_to_array.js\";\n\nexport function _sliced_to_array(arr, i) {\n    return _array_with_holes(arr) || _iterable_to_array_limit(arr, i) || _unsupported_iterable_to_array(arr, i) || _non_iterable_rest();\n}\nexport { _sliced_to_array as _ };\n","export function _array_with_holes(arr) {\n    if (Array.isArray(arr)) return arr;\n}\nexport { _array_with_holes as _ };\n","export function _iterable_to_array_limit(arr, i) {\n    var _i = arr == null ? null : typeof Symbol !== \"undefined\" && arr[Symbol.iterator] || arr[\"@@iterator\"];\n\n    if (_i == null) return;\n\n    var _arr = [];\n    var _n = true;\n    var _d = false;\n    var _s, _e;\n\n    try {\n        for (_i = _i.call(arr); !(_n = (_s = _i.next()).done); _n = true) {\n            _arr.push(_s.value);\n            if (i && _arr.length === i) break;\n        }\n    } catch (err) {\n        _d = true;\n        _e = err;\n    } finally {\n        try {\n            if (!_n && _i[\"return\"] != null) _i[\"return\"]();\n        } finally {\n            if (_d) throw _e;\n        }\n    }\n\n    return _arr;\n}\nexport { _iterable_to_array_limit as _ };\n","export function _non_iterable_rest() {\n    throw new TypeError(\"Invalid attempt to destructure non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n}\nexport { _non_iterable_rest as _ };\n","import { _array_like_to_array } from \"./_array_like_to_array.js\";\n\nexport function _unsupported_iterable_to_array(o, minLen) {\n    if (!o) return;\n    if (typeof o === \"string\") return _array_like_to_array(o, minLen);\n\n    var n = Object.prototype.toString.call(o).slice(8, -1);\n\n    if (n === \"Object\" && o.constructor) n = o.constructor.name;\n    if (n === \"Map\" || n === \"Set\") return Array.from(n);\n    if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _array_like_to_array(o, minLen);\n}\nexport { _unsupported_iterable_to_array as _ };\n","export function _array_like_to_array(arr, len) {\n    if (len == null || len > arr.length) len = arr.length;\n\n    for (var i = 0, arr2 = new Array(len); i < len; i++) arr2[i] = arr[i];\n\n    return arr2;\n}\nexport { _array_like_to_array as _ };\n","import { _array_without_holes } from \"./_array_without_holes.js\";\nimport { _iterable_to_array } from \"./_iterable_to_array.js\";\nimport { _non_iterable_spread } from \"./_non_iterable_spread.js\";\nimport { _unsupported_iterable_to_array } from \"./_unsupported_iterable_to_array.js\";\n\nexport function _to_consumable_array(arr) {\n    return _array_without_holes(arr) || _iterable_to_array(arr) || _unsupported_iterable_to_array(arr) || _non_iterable_spread();\n}\nexport { _to_consumable_array as _ };\n","import { _array_like_to_array } from \"./_array_like_to_array.js\";\n\nexport function _array_without_holes(arr) {\n    if (Array.isArray(arr)) return _array_like_to_array(arr);\n}\nexport { _array_without_holes as _ };\n","export function _iterable_to_array(iter) {\n    if (typeof Symbol !== \"undefined\" && iter[Symbol.iterator] != null || iter[\"@@iterator\"] != null) {\n        return Array.from(iter);\n    }\n}\nexport { _iterable_to_array as _ };\n","export function _non_iterable_spread() {\n    throw new TypeError(\"Invalid attempt to spread non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n}\nexport { _non_iterable_spread as _ };\n","export function _type_of(obj) {\n    \"@swc/helpers - typeof\";\n\n    return obj && typeof Symbol !== \"undefined\" && obj.constructor === Symbol ? \"symbol\" : typeof obj;\n}\nexport { _type_of as _ };\n"],"names":["$c3b10a83b523f372$export$79e617b1955a2616","arr","len","length","i","arr2","Array","$d4f69c5c6c4654b1$export$a5be06335b3a083c","o","minLen","n","Object","prototype","toString","call","slice","constructor","name","from","test","$efec029548ccee7f$export$fdf2a89c76341bbf","isArray","_s","_e","_i","Symbol","iterator","_arr","_n","_d","next","done","push","value","err","TypeError","$227c6742e0ff6f82$export$1b5e630bc3aea29f","iter","$0b5c99e6a0876eaa$export$5f0017c582d45a2d","obj","$197cd56b15c33885$var$game","protoProps","Game","initialState","instance","Constructor","messageStart","document","querySelector","messageLose","messageWin","startActive","score","key","_this","trows","tbody","children","getStatus","forEach","row","objArr","checkMerge","startCell","endCell","content","_loop","j","some","cellIndex","cellContent","v","_ret","cell","saveData","parseInt","textContent","exist","find","mergeTry","newTag","createElement","classList","add","replaceWith","_iteratorNormalCompletion","_didIteratorError","_iteratorError","undefined","_step","_iterator","concat","remove","return","reverse","colIndex","startRow","endRow","rowIndex","index","entries","_step_value","_iteratorNormalCompletion1","_didIteratorError1","_iteratorError1","_step1","_iterator1","childIndex","rowCell","trowsReversed","map","rowChildren","gameStatus","contains","switchButton","addTiles","td","getScore","btn","replace","set","sum","num","pickRandom","pick","Math","random","emptyCells","cells","randomIndex","floor","selectedCell","randomValue","generateTiles","splice","$4fc75ccb937ab1df$var$_defineProperties","target","props","descriptor","enumerable","configurable","writable","defineProperty","$197cd56b15c33885$var$body","$197cd56b15c33885$var$button","addEventListener","start","restart","e","getState","copyOfState","JSON","stringify","moveUp","moveDown","moveLeft","moveRight","hasEmptyCell"],"version":3,"file":"index.846555ea.js.map"}