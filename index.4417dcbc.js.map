{"mappings":"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","sources":["<anon>","src/scripts/main.js","src/modules/Game.class.js"],"sourcesContent":["\"use strict\";\nvar $a5fd07fa01589658$exports = {};\n\"use strict\";\n/**\n * This class represents the game.\n * Now it has a basic structure, that is needed for testing.\n * Feel free to add more props and methods if needed.\n */ class $a5fd07fa01589658$var$Game {\n    /**\n   * Creates a new game instance.\n   *\n   * @param {number[][]} initialState\n   * The initial state of the board.\n   * @default\n   * [[0, 0, 0, 0],\n   *  [0, 0, 0, 0],\n   *  [0, 0, 0, 0],\n   *  [0, 0, 0, 0]]\n   *\n   * If passed, the board will be initialized with the provided\n   * initial state.\n   */ constructor(initialState){\n        // eslint-disable-next-line no-console\n        this.initialState = initialState;\n        this.messageStart = document.querySelector(\".message-start\");\n        this.messageLose = document.querySelector(\".message-lose\");\n        this.messageWin = document.querySelector(\".message-win\");\n        this.startActive = false;\n        this.score = 0;\n    }\n    moveLeft() {\n        const tbody = document.querySelector(\"tbody\");\n        const trows = [\n            ...tbody.children\n        ];\n        const showStatus = this.getStatus();\n        if (showStatus === \"playing\") trows.forEach((row)=>{\n            const objArr = [];\n            const checkMerge = (startCell, endCell, content)=>{\n                for(let j = startCell + 1; j < endCell; j++){\n                    const prevent = objArr.some((obj)=>obj.cellIndex === j && obj.cellContent !== content);\n                    if (prevent) return false;\n                }\n                return true;\n            };\n            [\n                ...row.children\n            ].forEach((cell, i)=>{\n                const saveData = {};\n                const value = parseInt(cell.textContent);\n                if (value) {\n                    const exist = objArr.find((obj)=>obj.cellContent === value && checkMerge(obj.cellIndex, i, value) === true && obj.mergeTry < 1);\n                    if (exist) {\n                        exist.cellContent += value;\n                        exist.mergeTry++;\n                        this.score += exist.cellContent;\n                    } else {\n                        saveData.cellIndex = i;\n                        saveData.cellContent = value;\n                        saveData.mergeTry = 0;\n                        objArr.push(saveData);\n                    }\n                    const newTag = document.createElement(\"td\");\n                    newTag.classList.add(\"field-cell\");\n                    cell.replaceWith(newTag);\n                }\n            });\n            if (objArr.length !== 0) objArr.forEach((obj)=>{\n                for (const cell of [\n                    ...row.children\n                ])if (!cell.textContent) {\n                    cell.textContent = obj.cellContent;\n                    cell.classList.add(`field-cell--${obj.cellContent}`);\n                    if (obj.cellContent === 2048) {\n                        this.messageWin.classList.remove(\"hidden\");\n                        this.startActive = false;\n                    }\n                    break;\n                }\n            });\n        });\n    }\n    moveRight() {\n        const tbody = document.querySelector(\"tbody\");\n        const trows = [\n            ...tbody.children\n        ];\n        const showStatus = this.getStatus();\n        if (showStatus === \"playing\") trows.forEach((row)=>{\n            const objArr = [];\n            const checkMerge = (startCell, endCell, content)=>{\n                for(let j = startCell + 1; j < endCell; j++){\n                    const prevent = objArr.some((obj)=>obj.cellIndex === j && obj.cellContent !== content);\n                    if (prevent) return false;\n                }\n                return true;\n            };\n            [\n                ...row.children\n            ].reverse().forEach((cell, i)=>{\n                const saveData = {};\n                const value = parseInt(cell.textContent);\n                if (value) {\n                    const exist = objArr.find((obj)=>obj.cellContent === value && checkMerge(obj.cellIndex, i, value) === true && obj.mergeTry < 1);\n                    if (exist) {\n                        exist.cellContent += value;\n                        exist.mergeTry++;\n                        this.score += exist.cellContent;\n                    } else {\n                        saveData.cellIndex = i;\n                        saveData.cellContent = value;\n                        saveData.mergeTry = 0;\n                        objArr.push(saveData);\n                    }\n                    const newTag = document.createElement(\"td\");\n                    newTag.classList.add(\"field-cell\");\n                    cell.replaceWith(newTag);\n                }\n            });\n            if (objArr.length !== 0) objArr.forEach((obj)=>{\n                for (const cell of [\n                    ...row.children\n                ].reverse())if (!cell.textContent) {\n                    cell.textContent = obj.cellContent;\n                    cell.classList.add(`field-cell--${obj.cellContent}`);\n                    if (obj.cellContent === 2048) {\n                        this.messageWin.classList.remove(\"hidden\");\n                        this.startActive = false;\n                    }\n                    break;\n                }\n            });\n        });\n    }\n    moveUp() {\n        const tbody = document.querySelector(\"tbody\");\n        const trows = [\n            ...tbody.children\n        ];\n        const objArr = [];\n        const checkMerge = (colIndex, startRow, endRow, content)=>{\n            for(let j = startRow + 1; j < endRow; j++){\n                const prevent = objArr.some((obj)=>obj.rowIndex === j && obj.cellIndex === colIndex && obj.cellContent !== content);\n                if (prevent) return false;\n            }\n            return true;\n        };\n        const showStatus = this.getStatus();\n        if (showStatus === \"playing\") {\n            trows.forEach((row, index)=>{\n                [\n                    ...row.children\n                ].forEach((cell, i)=>{\n                    const saveData = {};\n                    const value = parseInt(cell.textContent);\n                    if (value) {\n                        const exist = objArr.find((obj)=>obj.cellIndex === i && obj.cellContent === value && checkMerge(i, obj.rowIndex, index, value) === true);\n                        if (exist) {\n                            exist.cellContent += value;\n                            this.score += exist.cellContent;\n                        } else {\n                            saveData.rowIndex = index;\n                            saveData.cellIndex = i;\n                            saveData.cellContent = value;\n                            objArr.push(saveData);\n                        }\n                        const newTag = document.createElement(\"td\");\n                        newTag.classList.add(\"field-cell\");\n                        cell.replaceWith(newTag);\n                    }\n                });\n            });\n            objArr.forEach((obj)=>{\n                for (const [key, value] of Object.entries(obj)){\n                    if (key === \"cellIndex\") for (const row of trows){\n                        const childIndex = parseInt(value) + 1;\n                        const rowCell = row.querySelector(`*:nth-child(${childIndex})`);\n                        if (!rowCell.textContent) {\n                            rowCell.textContent = obj.cellContent;\n                            rowCell.classList.add(`field-cell--${obj.cellContent}`);\n                            if (obj.cellContent === 2048) {\n                                this.messageWin.classList.remove(\"hidden\");\n                                this.startActive = false;\n                            }\n                            break;\n                        }\n                    }\n                }\n            });\n        }\n    }\n    moveDown() {\n        const tbody = document.querySelector(\"tbody\");\n        const trowsReversed = [\n            ...tbody.children\n        ].reverse();\n        const objArr = [];\n        const checkMerge = (colIndex, startRow, endRow, content)=>{\n            for(let j = startRow + 1; j < endRow; j++){\n                const prevent = objArr.some((obj)=>obj.rowIndex === j && obj.cellIndex === colIndex && obj.cellContent !== content);\n                if (prevent) return false;\n            }\n            return true;\n        };\n        const showStatus = this.getStatus();\n        if (showStatus === \"playing\") {\n            trowsReversed.forEach((row, index)=>{\n                [\n                    ...row.children\n                ].forEach((cell, i)=>{\n                    const saveData = {};\n                    const value = parseInt(cell.textContent);\n                    if (value) {\n                        const exist = objArr.find((obj)=>obj.cellIndex === i && obj.cellContent === value && checkMerge(i, obj.rowIndex, index, value) === true);\n                        if (exist) {\n                            exist.cellContent += value;\n                            this.score += exist.cellContent;\n                        } else {\n                            saveData.rowIndex = index;\n                            saveData.cellIndex = i;\n                            saveData.cellContent = value;\n                            objArr.push(saveData);\n                        }\n                        const newTag = document.createElement(\"td\");\n                        newTag.classList.add(\"field-cell\");\n                        cell.replaceWith(newTag);\n                    }\n                });\n            });\n            objArr.forEach((obj)=>{\n                for (const [key, value] of Object.entries(obj)){\n                    if (key === \"cellIndex\") for (const row of trowsReversed){\n                        const childIndex = parseInt(value) + 1;\n                        const rowCell = row.querySelector(`*:nth-child(${childIndex})`);\n                        if (!rowCell.textContent) {\n                            rowCell.textContent = obj.cellContent;\n                            rowCell.classList.add(`field-cell--${obj.cellContent}`);\n                            if (obj.cellContent === 2048) {\n                                this.messageWin.classList.remove(\"hidden\");\n                                this.startActive = false;\n                            }\n                            break;\n                        }\n                    }\n                }\n            });\n        }\n    }\n    /**\n   * @returns {number}\n   */ getScore() {\n        const score = document.querySelector(\".game-score\");\n        if (!this.startActive) this.score = 0;\n        score.textContent = this.score;\n        return this.score;\n    }\n    /**\n   * @returns {number[][]}\n   */ getState() {\n        const tbody = document.querySelector(\"tbody\");\n        const trows = [\n            ...tbody.children\n        ];\n        this.initialState = trows.map((row)=>{\n            const rowChildren = [\n                ...row.children\n            ];\n            const numbersArr = rowChildren.map((cell)=>{\n                let cellContent = parseInt(cell.textContent);\n                if (!cellContent) cellContent = 0;\n                return cellContent;\n            });\n            return numbersArr;\n        });\n    }\n    /**\n   * Returns the current game status.\n   *\n   * @returns {string} One of: 'idle', 'playing', 'win', 'lose'\n   *\n   * `idle` - the game has not started yet (the initial state);\n   * `playing` - the game is in progress;\n   * `win` - the game is won;\n   * `lose` - the game is lost\n   */ getStatus() {\n        let gameStatus = \"\";\n        if (this.startActive === false) gameStatus = \"idle\";\n        if (this.startActive === true) gameStatus = \"playing\";\n        if (!this.messageWin.classList.contains(\"hidden\")) gameStatus = \"win\";\n        if (!this.messageLose.classList.contains(\"hidden\")) gameStatus = \"lose\";\n        return gameStatus;\n    }\n    /**\n   * Starts the game.\n   */ start() {\n        this.messageStart.classList.add(\"hidden\");\n        this.switchButton();\n        this.startActive = true;\n        this.addTiles(2);\n    }\n    /**\n   * Resets the game.\n   */ restart() {\n        const tbody = document.querySelector(\"tbody\");\n        const trows = [\n            ...tbody.children\n        ];\n        this.messageStart.classList.remove(\"hidden\");\n        this.messageLose.classList.add(\"hidden\");\n        trows.forEach((row)=>{\n            [\n                ...row.children\n            ].forEach((td)=>{\n                const newTag = document.createElement(\"td\");\n                newTag.classList.add(\"field-cell\");\n                td.replaceWith(newTag);\n            });\n        });\n        this.startActive = false;\n        this.switchButton();\n        this.getScore();\n    }\n    // Add your own methods here\n    switchButton() {\n        const btn = document.querySelector(\".button\");\n        const hasRestart = btn.classList.contains(\"restart\");\n        if (hasRestart) {\n            btn.classList.replace(\"restart\", \"start\");\n            btn.textContent = \"Start\";\n        } else {\n            btn.classList.replace(\"start\", \"restart\");\n            btn.textContent = \"Restart\";\n        }\n    }\n    generateTiles() {\n        const set = {\n            2: 0.9,\n            4: 0.1\n        };\n        let sum = 0;\n        for(const num in set)sum += set[num];\n        function pickRandom() {\n            let pick = Math.random() * sum;\n            for(const j in set){\n                pick -= set[j];\n                if (pick <= 0) return j;\n            }\n        }\n        return pickRandom();\n    }\n    addTiles(num) {\n        const tbody = document.querySelector(\"tbody\");\n        const trows = [\n            ...tbody.children\n        ];\n        const numberOfTiles = num;\n        const emptyCells = [];\n        trows.forEach((row)=>{\n            const cells = [\n                ...row.children\n            ];\n            cells.forEach((cell)=>{\n                if (!cell.textContent) emptyCells.push(cell);\n            });\n        });\n        for(let i = 0; i < numberOfTiles; i++){\n            const randomIndex = Math.floor(Math.random() * emptyCells.length);\n            const selectedCell = emptyCells[randomIndex];\n            const randomValue = this.generateTiles();\n            selectedCell.textContent = randomValue;\n            selectedCell.classList.add(`field-cell--${randomValue}`);\n            emptyCells.splice(randomIndex, 1);\n        }\n    }\n    hasEmptyCell() {\n        for (const row of this.initialState){\n            if (row.some((cell)=>cell === 0)) return true;\n        }\n        return false;\n    }\n}\n$a5fd07fa01589658$exports = $a5fd07fa01589658$var$Game;\n\n\nconst $09e991522ca7e64e$var$game = new $a5fd07fa01589658$exports();\n// Write your code here\nconst $09e991522ca7e64e$var$body = document.querySelector(\"body\");\nconst $09e991522ca7e64e$var$button = document.querySelector(\".button\");\n$09e991522ca7e64e$var$button.addEventListener(\"click\", ()=>{\n    if ($09e991522ca7e64e$var$button.classList.contains(\"start\")) $09e991522ca7e64e$var$game.start();\n    else if ($09e991522ca7e64e$var$button.classList.contains(\"restart\")) $09e991522ca7e64e$var$game.restart();\n});\n$09e991522ca7e64e$var$body.addEventListener(\"keydown\", (e)=>{\n    $09e991522ca7e64e$var$game.getState();\n    const copyOfState = JSON.stringify($09e991522ca7e64e$var$game.initialState);\n    switch(e.key){\n        case \"ArrowUp\":\n            $09e991522ca7e64e$var$game.moveUp();\n            break;\n        case \"ArrowDown\":\n            $09e991522ca7e64e$var$game.moveDown();\n            break;\n        case \"ArrowLeft\":\n            $09e991522ca7e64e$var$game.moveLeft();\n            break;\n        case \"ArrowRight\":\n            $09e991522ca7e64e$var$game.moveRight();\n            break;\n    }\n    $09e991522ca7e64e$var$game.getState();\n    const actualState = JSON.stringify($09e991522ca7e64e$var$game.initialState);\n    if (copyOfState !== actualState) $09e991522ca7e64e$var$game.addTiles(1);\n    if (!$09e991522ca7e64e$var$game.hasEmptyCell()) $09e991522ca7e64e$var$game.messageLose.classList.remove(\"hidden\");\n    $09e991522ca7e64e$var$game.getScore();\n});\n\n\n//# sourceMappingURL=index.4417dcbc.js.map\n","'use strict';\n\n// Uncomment the next lines to use your game instance in the browser\nconst Game = require('../modules/Game.class');\nconst game = new Game();\n\n// Write your code here\n\nconst body = document.querySelector('body');\nconst button = document.querySelector('.button');\n\nbutton.addEventListener('click', () => {\n  if (button.classList.contains('start')) {\n    game.start();\n  } else if (button.classList.contains('restart')) {\n    game.restart();\n  }\n});\n\nbody.addEventListener('keydown', (e) => {\n  game.getState();\n\n  const copyOfState = JSON.stringify(game.initialState);\n\n  switch (e.key) {\n    case 'ArrowUp':\n      game.moveUp();\n      break;\n    case 'ArrowDown':\n      game.moveDown();\n      break;\n    case 'ArrowLeft':\n      game.moveLeft();\n      break;\n    case 'ArrowRight':\n      game.moveRight();\n      break;\n  }\n\n  game.getState();\n\n  const actualState = JSON.stringify(game.initialState);\n\n  if (copyOfState !== actualState) {\n    game.addTiles(1);\n  }\n\n  if (!game.hasEmptyCell()) {\n    game.messageLose.classList.remove('hidden');\n  }\n\n  game.getScore();\n});\n","'use strict';\n\n/**\n * This class represents the game.\n * Now it has a basic structure, that is needed for testing.\n * Feel free to add more props and methods if needed.\n */\nclass Game {\n  /**\n   * Creates a new game instance.\n   *\n   * @param {number[][]} initialState\n   * The initial state of the board.\n   * @default\n   * [[0, 0, 0, 0],\n   *  [0, 0, 0, 0],\n   *  [0, 0, 0, 0],\n   *  [0, 0, 0, 0]]\n   *\n   * If passed, the board will be initialized with the provided\n   * initial state.\n   */\n  constructor(initialState) {\n    // eslint-disable-next-line no-console\n    this.initialState = initialState;\n    this.messageStart = document.querySelector('.message-start');\n    this.messageLose = document.querySelector('.message-lose');\n    this.messageWin = document.querySelector('.message-win');\n    this.startActive = false;\n    this.score = 0;\n  }\n\n  moveLeft() {\n    const tbody = document.querySelector('tbody');\n    const trows = [...tbody.children];\n    const showStatus = this.getStatus();\n\n    if (showStatus === 'playing') {\n      trows.forEach((row) => {\n        const objArr = [];\n        const checkMerge = (startCell, endCell, content) => {\n          for (let j = startCell + 1; j < endCell; j++) {\n            const prevent = objArr.some(\n              (obj) => obj.cellIndex === j && obj.cellContent !== content,\n            );\n\n            if (prevent) {\n              return false;\n            }\n          }\n\n          return true;\n        };\n\n        [...row.children].forEach((cell, i) => {\n          const saveData = {};\n          const value = parseInt(cell.textContent);\n\n          if (value) {\n            const exist = objArr.find(\n              (obj) =>\n                obj.cellContent === value &&\n                checkMerge(obj.cellIndex, i, value) === true &&\n                obj.mergeTry < 1,\n            );\n\n            if (exist) {\n              exist.cellContent += value;\n              exist.mergeTry++;\n              this.score += exist.cellContent;\n            } else {\n              saveData.cellIndex = i;\n              saveData.cellContent = value;\n              saveData.mergeTry = 0;\n\n              objArr.push(saveData);\n            }\n\n            const newTag = document.createElement('td');\n\n            newTag.classList.add('field-cell');\n            cell.replaceWith(newTag);\n          }\n        });\n\n        if (objArr.length !== 0) {\n          objArr.forEach((obj) => {\n            for (const cell of [...row.children]) {\n              if (!cell.textContent) {\n                cell.textContent = obj.cellContent;\n                cell.classList.add(`field-cell--${obj.cellContent}`);\n\n                if (obj.cellContent === 2048) {\n                  this.messageWin.classList.remove('hidden');\n\n                  this.startActive = false;\n                }\n\n                break;\n              }\n            }\n          });\n        }\n      });\n    }\n  }\n\n  moveRight() {\n    const tbody = document.querySelector('tbody');\n    const trows = [...tbody.children];\n    const showStatus = this.getStatus();\n\n    if (showStatus === 'playing') {\n      trows.forEach((row) => {\n        const objArr = [];\n        const checkMerge = (startCell, endCell, content) => {\n          for (let j = startCell + 1; j < endCell; j++) {\n            const prevent = objArr.some(\n              (obj) => obj.cellIndex === j && obj.cellContent !== content,\n            );\n\n            if (prevent) {\n              return false;\n            }\n          }\n\n          return true;\n        };\n\n        [...row.children].reverse().forEach((cell, i) => {\n          const saveData = {};\n          const value = parseInt(cell.textContent);\n\n          if (value) {\n            const exist = objArr.find(\n              (obj) =>\n                obj.cellContent === value &&\n                checkMerge(obj.cellIndex, i, value) === true &&\n                obj.mergeTry < 1,\n            );\n\n            if (exist) {\n              exist.cellContent += value;\n              exist.mergeTry++;\n              this.score += exist.cellContent;\n            } else {\n              saveData.cellIndex = i;\n              saveData.cellContent = value;\n              saveData.mergeTry = 0;\n\n              objArr.push(saveData);\n            }\n\n            const newTag = document.createElement('td');\n\n            newTag.classList.add('field-cell');\n            cell.replaceWith(newTag);\n          }\n        });\n\n        if (objArr.length !== 0) {\n          objArr.forEach((obj) => {\n            for (const cell of [...row.children].reverse()) {\n              if (!cell.textContent) {\n                cell.textContent = obj.cellContent;\n                cell.classList.add(`field-cell--${obj.cellContent}`);\n\n                if (obj.cellContent === 2048) {\n                  this.messageWin.classList.remove('hidden');\n\n                  this.startActive = false;\n                }\n                break;\n              }\n            }\n          });\n        }\n      });\n    }\n  }\n\n  moveUp() {\n    const tbody = document.querySelector('tbody');\n    const trows = [...tbody.children];\n    const objArr = [];\n    const checkMerge = (colIndex, startRow, endRow, content) => {\n      for (let j = startRow + 1; j < endRow; j++) {\n        const prevent = objArr.some(\n          (obj) =>\n            obj.rowIndex === j &&\n            obj.cellIndex === colIndex &&\n            obj.cellContent !== content,\n        );\n\n        if (prevent) {\n          return false;\n        }\n      }\n\n      return true;\n    };\n    const showStatus = this.getStatus();\n\n    if (showStatus === 'playing') {\n      trows.forEach((row, index) => {\n        [...row.children].forEach((cell, i) => {\n          const saveData = {};\n          const value = parseInt(cell.textContent);\n\n          if (value) {\n            const exist = objArr.find(\n              (obj) =>\n                obj.cellIndex === i &&\n                obj.cellContent === value &&\n                checkMerge(i, obj.rowIndex, index, value) === true,\n            );\n\n            if (exist) {\n              exist.cellContent += value;\n              this.score += exist.cellContent;\n            } else {\n              saveData.rowIndex = index;\n              saveData.cellIndex = i;\n              saveData.cellContent = value;\n\n              objArr.push(saveData);\n            }\n\n            const newTag = document.createElement('td');\n\n            newTag.classList.add('field-cell');\n            cell.replaceWith(newTag);\n          }\n        });\n      });\n\n      objArr.forEach((obj) => {\n        for (const [key, value] of Object.entries(obj)) {\n          if (key === 'cellIndex') {\n            for (const row of trows) {\n              const childIndex = parseInt(value) + 1;\n              const rowCell = row.querySelector(`*:nth-child(${childIndex})`);\n\n              if (!rowCell.textContent) {\n                rowCell.textContent = obj.cellContent;\n                rowCell.classList.add(`field-cell--${obj.cellContent}`);\n\n                if (obj.cellContent === 2048) {\n                  this.messageWin.classList.remove('hidden');\n\n                  this.startActive = false;\n                }\n                break;\n              }\n            }\n          }\n        }\n      });\n    }\n  }\n\n  moveDown() {\n    const tbody = document.querySelector('tbody');\n    const trowsReversed = [...tbody.children].reverse();\n    const objArr = [];\n    const checkMerge = (colIndex, startRow, endRow, content) => {\n      for (let j = startRow + 1; j < endRow; j++) {\n        const prevent = objArr.some(\n          (obj) =>\n            obj.rowIndex === j &&\n            obj.cellIndex === colIndex &&\n            obj.cellContent !== content,\n        );\n\n        if (prevent) {\n          return false;\n        }\n      }\n\n      return true;\n    };\n    const showStatus = this.getStatus();\n\n    if (showStatus === 'playing') {\n      trowsReversed.forEach((row, index) => {\n        [...row.children].forEach((cell, i) => {\n          const saveData = {};\n          const value = parseInt(cell.textContent);\n\n          if (value) {\n            const exist = objArr.find(\n              (obj) =>\n                obj.cellIndex === i &&\n                obj.cellContent === value &&\n                checkMerge(i, obj.rowIndex, index, value) === true,\n            );\n\n            if (exist) {\n              exist.cellContent += value;\n              this.score += exist.cellContent;\n            } else {\n              saveData.rowIndex = index;\n              saveData.cellIndex = i;\n              saveData.cellContent = value;\n\n              objArr.push(saveData);\n            }\n\n            const newTag = document.createElement('td');\n\n            newTag.classList.add('field-cell');\n            cell.replaceWith(newTag);\n          }\n        });\n      });\n\n      objArr.forEach((obj) => {\n        for (const [key, value] of Object.entries(obj)) {\n          if (key === 'cellIndex') {\n            for (const row of trowsReversed) {\n              const childIndex = parseInt(value) + 1;\n              const rowCell = row.querySelector(`*:nth-child(${childIndex})`);\n\n              if (!rowCell.textContent) {\n                rowCell.textContent = obj.cellContent;\n                rowCell.classList.add(`field-cell--${obj.cellContent}`);\n\n                if (obj.cellContent === 2048) {\n                  this.messageWin.classList.remove('hidden');\n\n                  this.startActive = false;\n                }\n                break;\n              }\n            }\n          }\n        }\n      });\n    }\n  }\n  /**\n   * @returns {number}\n   */\n  getScore() {\n    const score = document.querySelector('.game-score');\n\n    if (!this.startActive) {\n      this.score = 0;\n    }\n\n    score.textContent = this.score;\n\n    return this.score;\n  }\n\n  /**\n   * @returns {number[][]}\n   */\n  getState() {\n    const tbody = document.querySelector('tbody');\n    const trows = [...tbody.children];\n\n    this.initialState = trows.map((row) => {\n      const rowChildren = [...row.children];\n      const numbersArr = rowChildren.map((cell) => {\n        let cellContent = parseInt(cell.textContent);\n\n        if (!cellContent) {\n          cellContent = 0;\n        }\n\n        return cellContent;\n      });\n\n      return numbersArr;\n    });\n  }\n\n  /**\n   * Returns the current game status.\n   *\n   * @returns {string} One of: 'idle', 'playing', 'win', 'lose'\n   *\n   * `idle` - the game has not started yet (the initial state);\n   * `playing` - the game is in progress;\n   * `win` - the game is won;\n   * `lose` - the game is lost\n   */\n  getStatus() {\n    let gameStatus = '';\n\n    if (this.startActive === false) {\n      gameStatus = 'idle';\n    }\n\n    if (this.startActive === true) {\n      gameStatus = 'playing';\n    }\n\n    if (!this.messageWin.classList.contains('hidden')) {\n      gameStatus = 'win';\n    }\n\n    if (!this.messageLose.classList.contains('hidden')) {\n      gameStatus = 'lose';\n    }\n\n    return gameStatus;\n  }\n\n  /**\n   * Starts the game.\n   */\n  start() {\n    this.messageStart.classList.add('hidden');\n\n    this.switchButton();\n\n    this.startActive = true;\n\n    this.addTiles(2);\n  }\n  /**\n   * Resets the game.\n   */\n  restart() {\n    const tbody = document.querySelector('tbody');\n    const trows = [...tbody.children];\n\n    this.messageStart.classList.remove('hidden');\n    this.messageLose.classList.add('hidden');\n\n    trows.forEach((row) => {\n      [...row.children].forEach((td) => {\n        const newTag = document.createElement('td');\n\n        newTag.classList.add('field-cell');\n        td.replaceWith(newTag);\n      });\n    });\n\n    this.startActive = false;\n    this.switchButton();\n    this.getScore();\n  }\n\n  // Add your own methods here\n\n  switchButton() {\n    const btn = document.querySelector('.button');\n    const hasRestart = btn.classList.contains('restart');\n\n    if (hasRestart) {\n      btn.classList.replace('restart', 'start');\n      btn.textContent = 'Start';\n    } else {\n      btn.classList.replace('start', 'restart');\n      btn.textContent = 'Restart';\n    }\n  }\n\n  generateTiles() {\n    const set = {\n      2: 0.9,\n      4: 0.1,\n    };\n\n    let sum = 0;\n\n    for (const num in set) {\n      sum += set[num];\n    }\n\n    function pickRandom() {\n      let pick = Math.random() * sum;\n\n      for (const j in set) {\n        pick -= set[j];\n\n        if (pick <= 0) {\n          return j;\n        }\n      }\n    }\n\n    return pickRandom();\n  }\n\n  addTiles(num) {\n    const tbody = document.querySelector('tbody');\n    const trows = [...tbody.children];\n    const numberOfTiles = num;\n    const emptyCells = [];\n\n    trows.forEach((row) => {\n      const cells = [...row.children];\n\n      cells.forEach((cell) => {\n        if (!cell.textContent) {\n          emptyCells.push(cell);\n        }\n      });\n    });\n\n    for (let i = 0; i < numberOfTiles; i++) {\n      const randomIndex = Math.floor(Math.random() * emptyCells.length);\n      const selectedCell = emptyCells[randomIndex];\n\n      const randomValue = this.generateTiles();\n\n      selectedCell.textContent = randomValue;\n      selectedCell.classList.add(`field-cell--${randomValue}`);\n\n      emptyCells.splice(randomIndex, 1);\n    }\n  }\n\n  hasEmptyCell() {\n    for (const row of this.initialState) {\n      if (row.some((cell) => cell === 0)) {\n        return true;\n      }\n    }\n\n    return false;\n  }\n}\nmodule.exports = Game;\n"],"names":["$09e991522ca7e64e$var$game","constructor","initialState","messageStart","document","querySelector","messageLose","messageWin","startActive","score","moveLeft","trows","tbody","children","getStatus","forEach","row","objArr","checkMerge","startCell","endCell","content","j","some","obj","cellIndex","cellContent","cell","i","saveData","value","parseInt","textContent","exist","find","mergeTry","push","newTag","createElement","classList","add","replaceWith","length","remove","moveRight","reverse","moveUp","colIndex","startRow","endRow","rowIndex","index","key","Object","entries","childIndex","rowCell","moveDown","trowsReversed","getScore","getState","map","rowChildren","gameStatus","contains","start","switchButton","addTiles","restart","td","btn","replace","generateTiles","set","sum","num","pickRandom","pick","Math","random","emptyCells","cells","randomIndex","floor","selectedCell","randomValue","splice","hasEmptyCell","$09e991522ca7e64e$var$body","$09e991522ca7e64e$var$button","addEventListener","e","copyOfState","JSON","stringify"],"version":3,"file":"index.4417dcbc.js.map"}